#!/usr/bin/env python3

import os

class GF:
    def __init__(self, v):
        self.val = int.from_bytes(v)
        self.pol = sum(2 ** i for i in [128, 7, 2, 1, 0])

    def m(self, a, b):
        result = 0
        for i in range(128):
            if b & 1:
                result ^= a
            b >>= 1
            a <<= 1
            if a & (1 << 128):
                a ^= self.pol
        return result

    def __mul__(self, other):
        a = self.val
        b = other.val
        result = self.m(a, b)
        return int.to_bytes(result, 16)

    def inverse(self):
        result = 1
        base = self.val
        exp = 2 ** 128 - 2
        while exp:
            if exp & 1:
                result = self.m(result, base)
            base = self.m(base, base)
            exp >>= 1
        return int.to_bytes(result, 16)

class Jafar:
    def __init__(self, k):
        # 128-bit secret key
        self.key = k

        # Sbox
        self.S = [
            0x00, 0x6a, 0x60, 0x19, 0x1b, 0x22, 0x69, 0x43, 0x31, 0x7b, 0x59, 0x68, 0x03, 0x28, 0x51, 0x41,
            0xb0, 0xfa, 0xd8, 0xe9, 0x82, 0xa9, 0xd0, 0xc0, 0x81, 0xeb, 0xe1, 0x98, 0x9a, 0xa3, 0xe8, 0xc2,
            0x73, 0x48, 0x02, 0x42, 0x12, 0x10, 0x71, 0x49, 0x78, 0x23, 0x52, 0x1a, 0x62, 0x32, 0x72, 0x30,
            0xf9, 0xa2, 0xd3, 0x9b, 0xe3, 0xb3, 0xf3, 0xb1, 0xf2, 0xc9, 0x83, 0xc3, 0x93, 0x91, 0xf0, 0xc8,
            0x5e, 0x6f, 0x36, 0x7c, 0x56, 0x46, 0x04, 0x2f, 0x67, 0x1e, 0x07, 0x6d, 0x6e, 0x44, 0x1c, 0x25,
            0xe6, 0x9f, 0x86, 0xec, 0xef, 0xc5, 0x9d, 0xa4, 0xdf, 0xee, 0xb7, 0xfd, 0xd7, 0xc7, 0x85, 0xae,
            0x55, 0x1d, 0x7f, 0x24, 0x75, 0x37, 0x65, 0x35, 0x05, 0x45, 0x74, 0x4f, 0x76, 0x4e, 0x15, 0x17,
            0x84, 0xc4, 0xf5, 0xce, 0xf7, 0xcf, 0x94, 0x96, 0xd4, 0x9c, 0xfe, 0xa5, 0xf4, 0xb6, 0xe4, 0xb4,
            0x4b, 0x33, 0x29, 0x21, 0x20, 0x39, 0x01, 0x7a, 0x5b, 0x50, 0x63, 0x70, 0x0b, 0x53, 0x58, 0x4a,
            0xda, 0xd1, 0xe2, 0xf1, 0x8a, 0xd2, 0xd9, 0xcb, 0xca, 0xb2, 0xa8, 0xa0, 0xa1, 0xb8, 0x80, 0xfb,
            0x3b, 0x13, 0x08, 0x38, 0x79, 0x5a, 0x09, 0x61, 0x11, 0x0a, 0x2b, 0x40, 0x3a, 0x18, 0x6b, 0x2a,
            0x90, 0x8b, 0xaa, 0xc1, 0xbb, 0x99, 0xea, 0xab, 0xba, 0x92, 0x89, 0xb9, 0xf8, 0xdb, 0x88, 0xe0,
            0x64, 0x77, 0x5c, 0x57, 0x5f, 0x4d, 0x0c, 0x54, 0x2e, 0x26, 0x4c, 0x34, 0x06, 0x7d, 0x27, 0x3e,
            0xaf, 0xa7, 0xcd, 0xb5, 0x87, 0xfc, 0xa6, 0xbf, 0xe5, 0xf6, 0xdd, 0xd6, 0xde, 0xcc, 0x8d, 0xd5,
            0x2c, 0x47, 0x16, 0x0d, 0x6c, 0x2d, 0x3d, 0x1f, 0x0f, 0x3f, 0x3c, 0x14, 0x0e, 0x66, 0x7e, 0x5d,
            0x8e, 0xbe, 0xbd, 0x95, 0x8f, 0xe7, 0xff, 0xdc, 0xad, 0xc6, 0x97, 0x8c, 0xed, 0xac, 0xbc, 0x9e
        ]
        self.invS = [ self.S.index(i) for i in range(256) ]

        # Wire permutation 
        self.P = [
            0x77, 0x65, 0x02, 0x3a, 0x4a, 0x7f, 0x17, 0x57, 0x66, 0x62, 0x5a, 0x6d, 0x7c, 0x20, 0x0b, 0x14,
            0x63, 0x76, 0x71, 0x0f, 0x78, 0x0e, 0x0c, 0x4b, 0x5f, 0x09, 0x2d, 0x3b, 0x18, 0x60, 0x73, 0x00,
            0x51, 0x6c, 0x58, 0x1d, 0x28, 0x50, 0x08, 0x13, 0x44, 0x38, 0x29, 0x26, 0x40, 0x4d, 0x42, 0x64,
            0x07, 0x34, 0x31, 0x01, 0x7e, 0x1a, 0x12, 0x4c, 0x10, 0x2b, 0x56, 0x49, 0x70, 0x7b, 0x21, 0x16,
            0x1c, 0x23, 0x69, 0x79, 0x06, 0x3d, 0x37, 0x3c, 0x0d, 0x6f, 0x1f, 0x36, 0x2e, 0x45, 0x75, 0x05,
            0x46, 0x74, 0x41, 0x04, 0x48, 0x4e, 0x0a, 0x47, 0x03, 0x2a, 0x59, 0x67, 0x7a, 0x22, 0x5e, 0x25,
            0x3e, 0x4f, 0x5c, 0x2f, 0x7d, 0x5d, 0x33, 0x39, 0x11, 0x2c, 0x53, 0x55, 0x68, 0x3f, 0x72, 0x27,
            0x35, 0x6e, 0x6b, 0x30, 0x43, 0x15, 0x54, 0x24, 0x6a, 0x19, 0x1b, 0x52, 0x61, 0x32, 0x5b, 0x1e
        ]
        self.invP = [ self.P.index(i) for i in range(128) ]

        # Number of rounds in upper and lower parts
        self.N = 20

    def AddKey(self, state):
        return bytes([ x ^ y for x, y in zip(state, self.key) ])

    def Sbox(self, state):
        return bytes([ self.S[x] for x in state ])

    def Permute(self, state):
        a = int.from_bytes(state)
        b = sum( ((a >> i) & 1) << (self.P[i]) for i in range(128) )
        return b.to_bytes(16)

    def Middle(self, state):
        return GF(state) * GF(self.key)

    def InvSbox(self,state):
        return bytes([ self.invS[x] for x in state ])

    def InvPermute(self, state):
        a = int.from_bytes(state)
        b = sum( ((a >> i) & 1) << (self.invP[i]) for i in range(128) )
        return b.to_bytes(16)

    def InvMiddle(self,state):
        return GF(state) * GF(GF(self.key).inverse())

    def Encrypt(self, x):
        state = x
        for _ in range(self.N):
            state = self.AddKey(state)
            state = self.Sbox(state)
            state = self.Permute(state)

        state = self.Middle(state)
        
        for _ in range(self.N):
            state = self.Sbox(state)
            state = self.Permute(state)
            state = self.AddKey(state)
        return state

    def Decrypt(self, x):
        state = x
        for _ in range(self.N):
            state = self.AddKey(state)
            state = self.InvPermute(state)
            state = self.InvSbox(state)
        state = self.InvMiddle(state)
        for _ in range(self.N):
            state = self.InvPermute(state)
            state = self.InvSbox(state)
            state = self.AddKey(state)
        return state

if __name__== "__main__":

    k = os.urandom(16)
    E = Jafar(k)

    L = []
    wishes = 3
    print("I am an oracle. I can encrypt or decrypt any data through my carefully designed block cipher.")
    print("You have three wishes, then you should provide a matching input/output pair (that you have not already requested, of course)!")

    while wishes:
        print(f'You have {wishes} wishes remaining:')
        print(' - For encryption, type "enc".')
        print(' - For decryption, type "dec".')
        print("What is your wish?")

        try:
            choice = input(">>> ")
        except:
            print("Please check your inputs.")
            exit()

        assert choice in ["enc", "dec"], 'Your wish should be either "enc" or "dec".'

        print("Understood. Please send your data (hex format).")
        try:
            data = bytes.fromhex(input(">>> "))
            assert len(data) == 16
        except:
            print("Incorrect data format. Exiting...")
            exit()

        if choice == "enc":
            requested_data = E.Encrypt(data)
            L.append(data)
        else:
            requested_data = E.Decrypt(data)
            L.append(requested_data)

        print("Here is your requested data:")
        print(requested_data.hex())
        wishes -= 1

    print("Now, show me a correct input/output pair that you have not requested:")
    try:
        m = bytes.fromhex(input(">>> "))
        c = bytes.fromhex(input(">>> "))
        assert len(m) == 16
        assert len(c) == 16
    except:
        print("Incorrect data format. Exiting...")
        exit()

    if m not in L and E.Encrypt(m) == c:
        print("Congrats! Here is the flag:")
        print(open("flag.txt").read())
    else:
        print("Nope")
